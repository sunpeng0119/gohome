<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- ======================================================================== -->
    <!-- DataSource定义 -->
    <!-- ======================================================================== -->
    <bean id="nornsDataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close" primary="true">
        <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/solo?useUnicode=true&amp;characterEncoding=utf8"/>
        <property name="username" value="root"/>
        <property name="password" value="123456789"/>
        <property name="defaultAutoCommit" value="false"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="3"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="50"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <!--<property name="validationQuery" value="SELECT 'x'" />-->
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

    </bean>

    <!-- ======================================================================== -->
    <!-- DAO定义 -->
    <!-- ======================================================================== -->
    <bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis/mysql-sqlmap-config.xml"/>
        <property name="mapperLocations" value="classpath*:mybatis/mapper/*.xml"/>
        <property name="typeAliasesPackage" value="cn.fraudmetrix.norns.service.dal.object"/>
        <property name="dataSource" ref="nornsDataSource"/>
    </bean>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="SqlSessionFactory"/>
    </bean>

    <bean name="MapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.fraudmetrix.norns.service.dal.dao"/>
        <property name="sqlSessionFactoryBeanName" value="SqlSessionFactory"/>
    </bean>

    <!-- ======= 事务定义开始 ======= -->
    <!-- Ibatis事务管理器 -->
    <bean id="TransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="nornsDataSource"/>
    </bean>

    <!-- 事务属性，方法以此开头的需要进行事务控制 -->
    <bean id="TxAttributeSource"
          class="org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource">
        <property name="properties">
            <props>
                <prop key="config*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="update*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="modify*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="insert*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="save*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="create*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="delete*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="remove*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="move*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="post*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="repost*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="disable*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="reorder*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="recover*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="repost*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="freeze*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="unfreeze*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="add*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="replace*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="register*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="bind*">PROPAGATION_REQUIRED,-RollbackableException</prop>
                <prop key="newTransactionWrapper">PROPAGATION_REQUIRES_NEW,-RollbackableException
                </prop>
            </props>
        </property>
    </bean>

    <!-- 事务拦截器 -->
    <bean id="TxInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="TransactionManager"/>
        <property name="transactionAttributeSource" ref="TxAttributeSource"/>
    </bean>

    <!-- 为匹配的Bean自动创建代理 -->
    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <list>
                <value>*Dao</value>
            </list>
        </property>
        <property name="interceptorNames">
            <list>
                <value>TxInterceptor</value>
            </list>
        </property>
    </bean>


</beans>
